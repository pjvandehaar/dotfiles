#!/usr/bin/env python3

import subprocess as subp, sys, json, re, random, os, contextlib
from typing import Optional

@contextlib.contextmanager
def with_downloaded_file(path:str):
    assert path.startswith('s3://') and not path.endswith('/'), path
    basename = os.path.basename(path)
    tmp_path = f'/tmp/{random.randint(0, 1000000000)}-{basename}'
    try:
        subp.run(['aws', 's3', 'cp', path, tmp_path], capture_output=True)
        yield tmp_path
    finally:
        os.remove(tmp_path)

UUID_REGEX = re.compile(r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')

#def s3_ls(path:str, recursive:bool=False) -> None: subp.run(['aws', 's3', 'ls', '--recursive' if recursive else '--', path])
def s3_ls(path:str, recursive:bool=False, only_path:bool=False) -> None:
    assert path.endswith('/'), path
    try:
        lines = [line for line in subp.check_output(['aws', 's3', 'ls', '--recursive' if recursive else '--', path]).decode().split('\n') if line.strip()]
    except Exception:
        return print('directory does not exist.')
    for line in lines:
        line_prefix = re.sub(r' [^ ]+$', ' ', line)
        line_suffix = line[len(line_prefix):]
        assert line_suffix and ' ' not in line_suffix, (line, line_suffix)
        if only_path: line_prefix=''
        if recursive:
            print(f'{line_prefix}s3://pray/{line_suffix}')
        else:
            print(f'{line_prefix}{path}{line_suffix}')
def s3_cat(path:str) -> None: subp.run(['aws', 's3', 'cp', path, '-'])
def s3_cat_json(path:str) -> None: text = subp.check_output(['aws', 's3', 'cp', path, '-']); data = json.loads(text); print(json.dumps(data, indent=2))
def s3_play_audio(path:str) -> None:
    with with_downloaded_file(path) as tmp_path:
        subp.run(['vlc', tmp_path])  # also consider using `afplay` or `vlc -I dummy`
def s3_detect_filetype(path:str) -> str:
    with with_downloaded_file(path) as tmp_path:
        ret = subp.check_output(['file', tmp_path]).decode().strip()
        if ret.startswith(f'{tmp_path}: '): ret = ret[len(tmp_path)+2:]
        return ret


if __name__ == '__main__':
    args: list[str] = [a for a in sys.argv[1:] if not a.startswith('-')] or ['']
    recursive = bool({'-r','--recursive'}.intersection(sys.argv))
    only_path = '--only-path' in sys.argv
    no_header = '--no-header' in sys.argv
    forced_extension: Optional[str] = None
    if ('--detect' in sys.argv): forced_extension = ''
    elif ('--cat' in sys.argv): forced_extension = 'txt'
    elif ('--play' in sys.argv) or ('--mp3' in sys.argv): forced_extension = 'mp3'
    elif ('--json' in sys.argv): forced_extension = 'json'

    for arg in args:
        # Normalize path:
        if arg == '': arg = 's3://pray/'
        elif arg.startswith('s3://'): pass
        elif arg.startswith('content/'): arg = f's3://pray/{arg}'
        elif UUID_REGEX.fullmatch(arg): arg = f's3://pray/content/{arg}/'  # needs trailing slash to list
        elif UUID_REGEX.match(arg): arg = f's3://pray/content/{arg}'
        else:
            print('Invalid path:', arg)
            print('Usage:')
            print('  pray_content $UUID')
            print('  pray_content $UUID/en-deepgram-response.json')
            print('  pray_content s3://pray/')
            print('Options:')
            print('  -r: Recursively list')
            print('  --cat: Cat the file')
            print('  --play: Play the audio')
            print('  --detect: Detect the filetype')
            sys.exit(1)
        assert arg.startswith('s3://')

        # Output:
        if arg.endswith('/'):
            if not no_header: print(f'=> Listing {arg}')
            s3_ls(arg, recursive=recursive, only_path=only_path)
        else:
            extension = forced_extension if forced_extension is not None else arg.split('.')[-1] if '.' in arg else ''
            if extension == '': print('Filetype =', s3_detect_filetype(arg))
            elif extension == 'json': s3_cat_json(arg)
            elif extension == 'txt': s3_cat(arg)
            elif extension == 'mp3': s3_play_audio(arg)
            else: print(f'Unknown filetype: {extension}')
        print()
