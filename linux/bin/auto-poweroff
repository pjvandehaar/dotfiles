#!/usr/bin/env python3

if __name__=='__main__': import kpa.dev_utils; kpa.dev_utils.run(__file__, make_cache=False)

import psutil

import os, sys, datetime, time
import subprocess as subp
from pathlib import Path
from typing import Dict,List

log_path = Path('/mnt/efs_v2/agds_cgad/users/peter.vandehaar/tmp/auto-poweroff.log')
instance_id = subp.check_output(['/usr/bin/ec2metadata','--instance-id']).decode().strip() if Path('/usr/bin/ec2metadata').exists() else ''
hostname = subp.check_output('hostname').decode().strip()
num_cores = psutil.cpu_count()


def get_procs() -> List[dict]:
    procs: Dict[int,dict] = {}
    for pid in psutil.pids():
        try:
            p = psutil.Process(pid)
            procs[pid] = {
                'cpu_t1_time': time.time(),
                'cpu_t1_total': (lambda x:x.system + x.user)(p.cpu_times()),
                'cmdline': [''],
            }
            procs[pid]['cmdline'] = p.cmdline()  # Might fail
        except (psutil.NoSuchProcess, psutil.AccessDenied, FileNotFoundError):
            pass
    time.sleep(1)
    for pid in procs:
        try: cpu_t2_total = (lambda x:x.system + x.user)(psutil.Process(pid).cpu_times())
        except psutil.NoSuchProcess: continue
        assert cpu_t2_total >= procs[pid]['cpu_t1_total'], (cpu_t2_total, procs[pid])
        procs[pid]['cpu'] = (cpu_t2_total - procs[pid]['cpu_t1_total']) / (time.time() - procs[pid]['cpu_t1_time'])
    return [d for d in procs.values() if 'cpu' in d]

def computer_is_occupied() -> bool:
    procs = get_procs()
    total_cpu_fraction = sum(p['cpu'] for p in procs) / num_cores
    pheweb_cores = sum(p['cpu'] for p in procs if any(part.endswith('pheweb') for part in p['cmdline']))
    is_occupied = total_cpu_fraction>.2 or pheweb_cores>.8
    append_to_log(f'total_cpu_frac={total_cpu_fraction:.0%}  pheweb_cores={pheweb_cores:.1f}  {is_occupied=}')
    return is_occupied

def poweroff() -> None:
    append_to_log('poweroff!')
    time.sleep(5)
    subp.call(['poweroff'])
    subp.call(['sudo','poweroff'])

def append_to_log(text:str) -> None:
    log_path.parent.mkdir(exist_ok=True)
    with open(log_path, 'at') as f:
        output = f"{datetime.datetime.now().isoformat()} ({os.environ.get('MACHINE_LABEL','')};{instance_id};{hostname})   {text.rstrip()}"
        print(output)
        f.write(output+'\n')

if __name__=='__main__':
    # If we're unoccupied 10-times-in-a-row, poweroff.
    was_occupied = [True]*10
    while True:
        was_occupied = was_occupied[1:] + [computer_is_occupied()]
        if not any(was_occupied): poweroff()
        time.sleep(3*60)
