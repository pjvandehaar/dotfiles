#!/usr/bin/env python3
# -*- mode: python -*-

"""
ksys is a command line utility for managing systemd services and connecting them to nginx.
It uses a directory .ksys/ (in the spirit of .git/) which stores config used in /etc/.
"""

# TODO: add `ksys test`, which restarts, sends some example requests, and shows logs if failed


if __name__ == '__main__':
    # This is slow, so only run it soon after modifying this file, or otherwise randomly.
    import time, random; from pathlib import Path
    if (time.time() - Path(__file__).stat().st_mtime) < 30 or random.random() < 0.01:
        try: import kpa.dev_utils
        except ImportError: pass
        else: kpa.dev_utils.run(__file__, make_cache=False)


from typing import Optional,List
import subprocess, os, random, re, shutil, json, sys, argparse
from pathlib import Path

os.environ['TZ'] = '/usr/share/zoneinfo/America/Detroit'  # Tells `journalctl` to print dates in this timezone

def print_and_run(argv:List[str]):
    print(argv)
    subprocess.call(argv)

def get_dotksys_path() -> Optional[Path]:
    """Return the path to .ksys/ in an ancestor directory, like how .git/ works."""
    path = Path().absolute()
    while path:
        if (dotksys_path := (path / '.ksys')).is_dir():
            return dotksys_path
        if path == path.parent: break
        path = path.parent
    return None

def get_unit_name() -> str:
    """Guess the `<name>.service` to use. First look for `.ksys/<name>.service` and then check if we're in `/srv/<name>/`."""
    if (dotksys_path := get_dotksys_path()):
        assert len(list(dotksys_path.glob('*.service'))) == 1  # If >1, choose one?
        for filepath in dotksys_path.iterdir():
            filename = filepath.name.split('%')[-1]
            if filename.endswith('.service'):
                return '.'.join(filename.split('.')[:-1])
    if (path := Path().absolute()).parts[:2] == ('/', 'srv') and len(path.parts) >= 3:
        return f"kpa-{path.parts[2]}"
    raise Exception("Couldn't detect service name, because there's no ancestral .ksys/ and you're not in /srv/*/")

def log(args:argparse.Namespace):
    """Show logs for a service."""
    unit_name = args.unit or get_unit_name()
    if args and args.all:
        cmd = ["sudo", "journalctl", "-u", unit_name, '--no-hostname']
    elif args and args.follow:
        cmd = ["sudo", "journalctl", "-u", unit_name, '--follow', '--no-hostname']
        print('--- Ctrl-C quits ---')
    else:
        last_run_id = subprocess.check_output(['systemctl','show','--value','-p','InvocationID',unit_name]).decode().strip()
        cmd = ["sudo", "journalctl", f"_SYSTEMD_INVOCATION_ID={last_run_id}", '--no-hostname']
    try:
        print_and_run(cmd)
    except KeyboardInterrupt:
        print()

def stat(args:argparse.Namespace):
    """Show the status and recent logs for a service."""
    unit_name = (args and args.unit) or get_unit_name()
    cmd = ["sudo", "systemctl", "--no-pager", "status", "-n0", unit_name]
    print_and_run(cmd); print()
    cmd = ["sudo", "journalctl", "--no-pager", "-n20", "-u", unit_name, '--no-hostname']
    print_and_run(cmd)

def restart(args:argparse.Namespace):
    """Restart a service, and then show some logs to let you verify that it's working."""
    unit_name = args.unit or get_unit_name()
    try: cursor = json.loads(subprocess.check_output(['sudo', 'journalctl', '-u', unit_name, '--quiet', '--output-fields=__CURSOR', '-n1', '--output=json']))['__CURSOR']
    except Exception: cursor = None
    # Restart
    cmd = ["sudo", "systemctl", "restart", unit_name]
    print_and_run(cmd); print()

    # Note: `systemctl restart` waits for a type=oneshot service to exit.
    service_type = subprocess.check_output(['systemctl', 'show', '--value', '--property=Type', unit_name]).decode().strip()
    if service_type == 'oneshot':
        if cursor:
            cmd = ['sudo', 'journalctl', '-u', unit_name, '--no-pager', '--no-hostname', '--after-cursor', cursor]
        else:
            last_run_id = subprocess.check_output(['systemctl','show','--value','-property=InvocationID',unit_name]).decode().strip()
            cmd = ["sudo", "journalctl", f"_SYSTEMD_INVOCATION_ID={last_run_id}", '--no-pager', '--no-hostname']
    else:
        if cursor:
            cmd = ['sudo', 'journalctl', '-u', unit_name, '--no-pager', '--no-hostname', '--follow', '--after-cursor', cursor]
        else:
            # This misses messages that are printed too quick after the restart
            cmd = ["sudo", "journalctl", '-u', unit_name, '--no-pager', '--no-hostname', '--follow', '-n1']
        print('--- Ctrl-C quits ---')
    try: print_and_run(cmd)
    except KeyboardInterrupt: pass
    print()

    # Show the current state of the service
    subprocess.call(['sudo', 'systemctl', 'is-failed', unit_name])

def venv(args:argparse.Namespace):
    """Make ./venv/ and gitignore it."""
    if Path('venv').exists():
        if args.force: shutil.rmtree('venv'); print('rm -rf venv')
        else: raise Exception('`./venv/` already exists.  Use -f to overwrite.')
    print_and_run([args.python, '-m', 'venv', 'venv'])
    print_and_run(['./venv/bin/pip3', 'install', 'wheel'])

    req_paths = [Path(p) for p in args.requirement]
    if Path('requirements.txt').exists(): req_paths.append(Path('requirements.txt'))
    for req_path in req_paths: print_and_run(['./venv/bin/pip3', 'install', '-r', str(req_path)])

    epkg_paths = [Path(p) for p in args.editable]
    for epkg_path in epkg_paths: print_and_run(['./venv/bin/pip3', 'install', '-e', str(epkg_path)])

    if Path('.git').is_dir():
        gitignore_path = Path('.gitignore')
        if not gitignore_path.is_file():
            gitignore_path.write_text('venv\n')
        elif 'venv' not in gitignore_path.read_text():
            gitignore_path.write_text(gitignore_path.read_text().rstrip() + '\nvenv\n')

systemd_service_template = '''\
[Unit]
Description={name}
After=network.target
OnFailure=kpa-failure-telegram@%i.service

[Service]
User=nobody
Group=nogroup
WorkingDirectory={dir}
ExecStart={exec}
'''
systemd_daemon_template = systemd_service_template + '''\

[Install]
WantedBy=multi-user.target
'''
systemd_scheduled_template = systemd_service_template + '''\
Type=oneshot
Nice=10
'''
systemd_timer_template = '''\
[Unit]
Description={name}

[Timer]
OnCalendar=*-*-* 00,12:00:00
RandomizedDelaySec=1m
Persistent=true

[Install]
WantedBy=timers.target
'''
nginx_template = '''\
server {
  server_name {hostname};
  listen 80;
  location / {
    include proxy_params;
    proxy_pass http://localhost:{port};
  }
}
'''
nginx_template = re.subn(r'(\s})', r'\1}', re.subn(r'({\s)', r'{\1', nginx_template)[0])[0]  # escape `{ ` and ` }`

def conf_create(args:argparse.Namespace):
    """Create ./.ksys/ and put config in it."""
    dotksys_path = Path('.ksys')
    dotksys_path.mkdir(exist_ok=True)
    name = str(args.name) if args.name else get_unit_name()
    directory = str(Path().absolute()) + '/'  # aesthetic
    if args.timer:
        filename = f'/etc/systemd/system/{name}.service'.replace('/', '%')
        (dotksys_path / filename).write_text(systemd_scheduled_template.format(
            name=name,
            dir=directory,
            exec='{exec}',
        ))
        filename = f'/etc/systemd/system/{name}.timer'.replace('/', '%')
        (dotksys_path / filename).write_text(systemd_timer_template.format(name=name))
    elif args.nginx_hostname:
        port = 8000 + random.randrange(1000)
        filename = f'/etc/systemd/system/{name}.service'.replace('/', '%')
        (dotksys_path / filename).write_text(systemd_daemon_template.format(
            name=name,
            dir=directory,
            exec='{exec}' + f' --port={port}',
        ))
        hostname = args.nginx_hostname if len(args.nginx_hostname)>1 else (f'{name[4:]}.petervh.com' if name.startswith('kpa-') else f'{name}.petervh.com')
        filename = f'/etc/nginx/sites-available/{hostname}'.replace('/', '%')
        (dotksys_path / filename).write_text(nginx_template.format(hostname=hostname, port=port))
    else:
        filename = f'/etc/systemd/system/{name}.service'.replace('/', '%')
        (dotksys_path / filename).write_text(systemd_daemon_template.format(
            name=name,
            dir=directory,
            exec='{exec}',
        ))
    print('Now populate Exec= in .ksys/*.service and run `ksys conf-diff` and `ksys conf-install`')

def conf_install(args:argparse.Namespace):
    """Copy config from .ksys/ to /etc/ and restart services as appropriate."""
    if not (dotksys_path := get_dotksys_path()): raise Exception('No directory ./.ksys')
    for path in dotksys_path.iterdir():
        if path.name.endswith('~') or '#' in path.name: continue  # temp file
        dest_path = Path(path.name.replace('%', '/'))
        print_and_run(['sudo', 'cp', '-f', str(path), str(dest_path)])
        if path.name.startswith('%etc%systemd') and path.suffix == '.timer':
            print_and_run(['sudo', 'systemctl', 'enable', dest_path.name])
        elif path.name.startswith('%etc%systemd') and path.suffix == '.service':
            if 'WantedBy' in path.read_text():
                print_and_run(['sudo', 'systemctl', 'enable', dest_path.name])
        elif path.name.startswith('%etc%nginx'):
            print_and_run(['sudo', 'ln', '-sf', str(dest_path), '/etc/nginx/sites-enabled'])
            print_and_run(['sudo', 'nginx', '-t'])
            print_and_run(['sudo', 'systemctl', 'restart', 'nginx'])
            print('You might need to run `certbot`')
        print_and_run(['sudo', 'systemctl', 'daemon-reload'])

def conf_import(args:argparse.Namespace):
    """Copy config into `.ksys/`."""
    dotksys_path = get_dotksys_path() or Path('.ksys')
    dotksys_path.mkdir(exist_ok=True)
    for path in args.paths:
        dest_path = dotksys_path / str(path).replace('/', '%')
        print(f'Copying {path} -> {dest_path}')
        shutil.copy(path, dest_path)

def conf_diff(args:argparse.Namespace):
    """Diff config in `.ksys/` against `/etc/`."""
    if not (dotksys_path := get_dotksys_path()): raise Exception('No directory ./.ksys')
    num_cols = shutil.get_terminal_size((80, 20)).columns
    for path in dotksys_path.iterdir():
        if path.name.endswith('~') or '#' in path.name: continue  # temp file
        dest_path = Path(path.name.replace('%', '/'))
        if not dest_path.exists():
            print(f"===== {path} ===== {dest_path} [[doesn't exist]]")
        elif dest_path.read_text() == path.read_text():
            print(f'===== {path} ===== {dest_path} == [[identical]]')
        else:
            print(f'===== {path} ===== {dest_path}')
            subprocess.call(['diff', '-dyb', f'--width={num_cols}', str(path), str(dest_path)])
        print()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    commands = parser.add_subparsers(dest='command')

    log_parser = commands.add_parser('log', aliases=['l'])
    log_parser.add_argument('-u', '--unit', type=str, default=None, help='What systemd unit')
    log_parser.add_argument('-a', '--all', action='store_true', help='Show all logs rather than only the latest run')
    log_parser.add_argument('--follow', action='store_true', help='Follow the end (Ctrl-C to stop)')
    log_parser.set_defaults(func=log)

    stat_parser = commands.add_parser('stat', aliases=['s'])
    stat_parser.add_argument('-u', '--unit', type=str, default=None, help='What systemd unit')
    stat_parser.set_defaults(func=stat)

    restart_parser = commands.add_parser('restart', aliases=['r'])
    restart_parser.add_argument('-u', '--unit', type=str, default=None, help='What systemd unit')
    restart_parser.set_defaults(func=restart)

    venv_parser = commands.add_parser('venv')
    venv_parser.add_argument('-f', '--force', action='store_true', help='Overwrite any existing `./venv/`')
    venv_parser.add_argument('-r', '--requirement', type=str, default=[], action='append', help='an extra requirements.txt file to install from using `pip install -r` (./requirements.txt is always installed from if it exists)')
    venv_parser.add_argument('-e', '--editable', type=str, default=[], action='append', help='an editable package to install using `pip install -e`')
    venv_parser.add_argument('-p', '--python', type=str, default='python3', help='the python executable to use')
    venv_parser.set_defaults(func=venv)

    conf_create_parser = commands.add_parser('conf-create')
    conf_create_parser.add_argument('--name', type=str, default=None, help='What name to use (defaults to kpa-{dirname})')
    conf_create_parser.add_argument('--timer', action='store_true', help='Create a timer rather than a daemon')
    conf_create_parser.add_argument('--nginx-hostname', type=str, default=None, help='Create nginx config for a daemon listening on this hostname (or `.` for default')
    conf_create_parser.set_defaults(func=conf_create)

    conf_install_parser = commands.add_parser('conf-install')
    conf_install_parser.set_defaults(func=conf_install)

    conf_import_parser = commands.add_parser('conf-import')
    conf_import_parser.add_argument('paths', type=str, nargs='+')
    conf_import_parser.set_defaults(func=conf_import)

    conf_diff_parser = commands.add_parser('conf-diff')
    conf_diff_parser.set_defaults(func=conf_diff)

    args = parser.parse_args() if sys.argv[1:] else parser.parse_args(['stat'])
    args.func(args)
