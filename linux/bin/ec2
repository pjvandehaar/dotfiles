#!/usr/bin/env python3

## Note: An EC2 is either: stopped, zombie (running+unreachable), ok (running+reachable), changing (pending/rebooting/stopping)


if __name__ == '__main__': import kpa; kpa.lint(__file__, run_rarely=True)

from dataclasses import dataclass
from pathlib import Path
import subprocess as subp
import os, json, sys, pprint, textwrap, time, re
from typing import List,Tuple,Union


def get_instance_id(s:str) -> str:
    if s.startswith('i-'): assert s[2:].isalnum() and 10<len(s)<24, s; return s
    iid_by_name = {host.label:host.instance_id for host in hosts}
    return iid_by_name[s]

def is_ok(data:dict) -> bool:
    assert is_ok1(data) == is_ok2(data)
    return is_ok1(data)
def is_ok1(data:dict) -> bool:
    try: return data['InstanceStatus']['Status'] == 'ok'
    except Exception: raise Exception(data)
def is_ok2(data:Union[dict,list]) -> bool:
    if isinstance(data, list):
        return all(is_ok2(elem) for elem in data)
    elif isinstance(data, dict):
        if 'Status' in data and data['Status'] not in ['ok', 'passed']: return False
        return all(is_ok2(val) for key,val in data.items() if isinstance(val, (list,dict)))  # Remember, all([])==True
    raise Exception(f'Why did I call is_ok2({repr(data)})')

def fetch_state(instance_id:str, verbose=True) -> Tuple[str,bool,bool,dict]:
    '''Returns (state, ok, is_zombie, data).  I could use boto3, but why bother?'''
    cmd = f'aws --region us-east-1 ec2 describe-instance-status --include-all-instances --instance-ids {instance_id}'
    raw_output = subp.check_output(cmd.split()).decode()
    try:
        data = json.loads(raw_output)['InstanceStatuses'][0]
        prettyprint(data, indent=2)
        return parse_state(data)
    except Exception: raise Exception(raw_output)
def parse_state(data:dict) -> Tuple[str,bool,bool,dict]:
    try:
        assert data['AvailabilityZone'].startswith('us-east-1')
        state = data['InstanceState']['Name']
        ok = state == 'running' and is_ok(data)
    except Exception: raise Exception(data)
    is_zombie = state=='running' and not ok
    return (state, ok, is_zombie, data)

def prettyprint(d, indent:int = 0) -> None: print(textwrap.indent(pprint.pformat(d, width=120), ' '*indent))

def print_and_run(cmd:str) -> None: print(f'$ {cmd}'); subp.run(cmd.split(), check=True, env=dict(os.environ.copy(), PAGER='', AWS_PAGER=''))


## Parse hosts from `~/.ssh/config`:
@dataclass
class Host:
    label: str
    instance_id: str = ''
    ip: str = ''
hosts: List[Host] = []
with open(Path.home() / '.ssh/config') as f:
    for line in f:
        parts = line.strip().split()
        if not parts: continue
        if parts[0] == 'Host': hosts.append(Host(label=parts[1]))
        elif parts[0] == '#aws' and hosts and parts[-1].startswith('i-'): hosts[-1].instance_id = parts[-1]
        elif parts[0] == 'HostName' and hosts and '.' in parts[-1]: hosts[-1].ip = parts[-1]
hosts = [host for host in hosts if host.instance_id]
if not hosts: raise Exception("You don't have any lines like \"#aws i-01e8f0\" lines in your .ssh/config")

if __name__ == '__main__':
    command = sys.argv[1] if sys.argv[1:] and not sys.argv[1].startswith('-') else ''

    if {'-h', '--help', 'help'}.intersection(sys.argv):
        print('Usage:')
        print('  ec2 patch')
        print('  ec2 start $id')
        print('  ec2 stop $id')
        print('  ec2 restart $id')
        print('  ec2 iid $id')
        print('  ec2 ip $id')
        print('  ec2')

    elif command == 'patch':
        instance_id = subp.check_output(['ec2metadata', '--instance-id']).decode().strip()
        assert re.fullmatch(r'i-[0-9a-f]{10,20}', instance_id), instance_id
        print_and_run('''sudo aws ssm start-automation-execution --document-name arn:aws:ssm:us-east-1:265776368239:document/regn-ec2-patching-automation --parameters {"AutomationAssumeRole":["arn:aws:iam::{{global:ACCOUNT_ID}}:role/regn-ssm-patching-automation-role"],"InstanceId":["IID"],"Backup":["false"],"Reboot":["RebootIfNeeded"]} --region us-east-1'''.replace('IID',instance_id))

    elif command in ['restart', 'reboot']:  # `aws ec2 reboot-instances` ignores running-but-unreachable instances, so use this instead.
        assert not sys.argv[3:]
        instance_id = get_instance_id(sys.argv[2])
        print('=> Stopping...')
        print_and_run(f'aws --region us-east-1 ec2 stop-instances --instance-ids {instance_id}'); print('=> Waiting until it\'s stopped...')
        while fetch_state(instance_id)[0]!='stopped': time.sleep(10)
        print('=> Stopped!  Starting...')
        print_and_run(f'aws --region us-east-1 ec2 start-instances --instance-ids {instance_id}'); print('=> Wait a minute and then try to ssh in.')

    elif command == 'start':
        instance_ids = [get_instance_id(arg) for arg in sys.argv[2:]]
        print_and_run(f'aws --region us-east-1 ec2 start-instances --instance-ids {" ".join(instance_ids)}')

    elif command == 'stop':
        instance_ids = [get_instance_id(arg) for arg in sys.argv[2:]]
        print_and_run(f'aws --region us-east-1 ec2 stop-instances --instance-ids {" ".join(instance_ids)}')

    elif command == 'iid':
        for arg in sys.argv[2:]: print(get_instance_id(arg))

    elif command == 'ip':
        instance_ids = [get_instance_id(arg) for arg in sys.argv[2:]]
        for host in hosts:
            if host.instance_id in instance_ids:
                print(host.ip)

    elif sys.argv[1:] == [] or sys.argv[1].startswith('-'):  # Fetch all states and print:
        cmd = 'aws --region us-east-1 ec2 describe-instance-status --include-all-instances --instance-ids'.split() + list({host.instance_id for host in hosts})
        all_data = json.loads(subp.check_output(cmd).decode())
        assert isinstance(all_data, dict) and isinstance(all_data.get('InstanceStatuses'), list), all_data
        data_by_iid = {d['InstanceId']:d for d in all_data['InstanceStatuses']}
        for host in hosts:
            state, ok, is_zombie, data = parse_state(data_by_iid[host.instance_id])
            status = data['InstanceStatus']['Status']
            print(f'=> {host.label} ' + ('(ok)' if ok else (f'[{state}:{status}]' if is_zombie else f'[{state}]')))
            # cmd1 = 'start' if state=='stopped' else ('restart' if is_zombie else 'stop')
            # print(' '*15+f'ec2 {cmd1} {host.instance_id}')
            if '-v' in sys.argv or is_zombie: prettyprint(data, indent=5); print()

    else:
        print(f"Unknown arg: {sys.argv[1]}")
