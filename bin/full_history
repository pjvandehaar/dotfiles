#!/usr/bin/python3

# Note: This script breaks with /opt/homebrew/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/bin/python3.9, so I use /usr/bin/python3

# Note: prompt_prompt.sh doesn't write to ~/.full_history until a command finishes.  So `ssh` is often an hour late.

import datetime, argparse, glob, os, re, time, shutil, sqlite3, copy, subprocess as sub
import boltons.iterutils


term_width = shutil.get_terminal_size().columns
machine_aliases = {
    'W25F6VW6VC': 'MBP',
    'C02TQ1DGG8WN': 'MBP',
    'rgc-024082248.regeneron.regn.com': 'pv',
    'rgc-024083017.regeneron.regn.com': 'pwpv',
}

def get_file_age_minutes(path): return (time.time() - os.stat(path).st_mtime) / 60
def file_missing_or_old(path): return not os.path.exists(path) or get_file_age_minutes(path) > 60*10
def try_run_cmd(cmd:str):
    print(f'=> Running: {cmd}')
    try: sub.run(cmd.split(), check=True)
    except sub.CalledProcessError: print('=> FAILED!\n\n'); time.sleep(1)
    else: print('=> Done\n')
for server in ['pv', 'pw-pv']:
    if file_missing_or_old(f'/tmp/{server}_full_history'):
        try_run_cmd(f'scp {server}:~/.full_history /tmp/{server}_full_history')

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--all', action='store_true', help='Show all history, rather than just today')
    parser.add_argument('day', nargs='?', help='What day to show.  eg: 2022-06-20.  If unspecified, shows today.')
    args = parser.parse_args()
    if args.all: day_str_filter = ''
    elif args.day:
        day_str_filter = args.day
        if re.match(r'^\d\d-\d\d$', day_str_filter): day_str_filter = f'2022-{day_str_filter}'
    else: day_str_filter = datetime.datetime.today().strftime('%Y-%m-%d')
    return day_str_filter
day_str_filter = parse_args()

def get_rows():
    paths = [os.path.expanduser('~/.full_history')] + glob.glob('/tmp/*_full_history')
    for path in paths:
        print(f'=> Parsing {path}')
        with open(path) as f:
            for line in f:
                line = line.rstrip()
                if len(line)<5 or not line.startswith('20') or line.count(' ')<3: continue
                time_str = line.split()[0]
                if not time_str.startswith(day_str_filter): continue

                # TODO: Consider using `(?P<time_str>\S+)` and `rowdata = cleanup(m.groupdict())`
                if (m := re.match(r'^(\S+)  (\S+)  ([/~].*)  (\d+)s  ?(.*)$', line)):
                    # TODO: Set time_str -= runtime_seconds
                    time_str, machine, pwd, runtime, cmd = m.groups()
                    time_str = _clean_time(time_str)
                    machine = _clean_machine(machine)
                    pwd = _clean_pwd(pwd)
                    runtime_seconds = int(runtime)
                    runtime = f'({runtime_seconds//60}min)  ' if runtime_seconds>60*10 else ''
                    yield (time_str, machine, pwd, f'{runtime}{cmd}')

                elif (m := re.match(r'^(\S+) {1,2}(\S+) {1,2}([/~].*)  \d+\*?  ?(.*)$', line)):
                    time_str, machine, pwd, cmd = m.groups()
                    time_str = _clean_time(time_str)
                    machine = _clean_machine(machine)
                    pwd = _clean_pwd(pwd)
                    yield (time_str, machine, pwd, cmd)

                elif (m := re.match(r'^(\S+) {1,2}(\S+) {1,2}(.*)$', line)):
                    time_str, machine, rest = m.groups()
                    time_str = _clean_time(time_str)
                    machine = _clean_machine(machine)
                    yield (time_str, machine, rest+'  [failed_match]')

                else:
                    raise Exception(line)

def _clean_time(time_str:str) -> str:
    time_pattern = r'^(202#-##-##)(?:_|__|--)(##[-:]##[-:]##)(.*)'.replace('#','[0-9]')
    m = re.match(time_pattern, time_str)
    assert m, repr(time_str)
    assert m.group(3) in ['', '_-0400', '-0400'], repr(m.group(3))
    return f"{m.group(1)}__{m.group(2).replace('-',':')}"
def _clean_machine(machine:str) -> str: return machine_aliases.get(machine, machine)
def _clean_pwd(pwd:str) -> str:
    pwd = pwd.strip()
    pwd = pwd.replace('/Users/peter.vandehaar', '~')
    pwd = pwd.replace('/home/s.peter.vandehaar', '~')
    return pwd.replace('/mnt/efs_v2/agds_cgad/users/peter.vandehaar', 'efs')


def get_browser_history_rows():
    print('=> Parsing Edge')
    edge_history_path = '/Users/peter.vandehaar/Library/Application Support/Microsoft Edge/Default/History'
    edge_history_sqlite_path = f'file:{edge_history_path}?immutable=1'
    try: db = sqlite3.connect(edge_history_sqlite_path)
    except sqlite3.OperationalError: raise Exception(edge_history_sqlite_path)
    db.row_factory = sqlite3.Row
    def dict_from_row(row: sqlite3.Row) -> dict: return {k: row[k] for k in row.keys()}
    query = 'SELECT visits.visit_time, urls.url, urls.title FROM urls, visits WHERE urls.id = visits.url'
    for row in db.execute(query):
        dt = datetime.datetime(1601, 1, 1) + datetime.timedelta(seconds=row['visit_time']/1e6) # lol, µs since 1601??
        dt -= datetime.timedelta(hours=4)  # Convert UTC -> EDT in summer
        time_str = dt.strftime('%Y-%m-%d__%H:%M:%S')
        if time_str.startswith(day_str_filter):
            yield (time_str, 'Edge', row['url'])

def get_pmset_rows():
    print('=> Parsing `pmset -g log`')
    lines = sub.check_output('pmset -g log'.split()).decode().split('\n')
    lines = [line.rstrip() for line in lines]
    for line in lines:
        if line.startswith('Total Sleep/Wakes since'): break
        if not line.startswith('2022-'): continue
        pattern = r'^(2022-##-## ##:##:##) -0400 ([a-zA-Z].*)$'.replace('#','[0-9]')
        m = re.match(pattern, line)
        assert m, repr(line)
        time_str, info = m.groups()
        time_str = time_str.replace(' ', '__')
        if not time_str.startswith(day_str_filter): continue
        info = re.sub(r'\s+', ' ', info)
        if info == 'Notification Display is turned on':
            yield (time_str, 'pmset', 'lid opened')
        if info == 'Notification Display is turned off':
            yield (time_str, 'pmset', 'lid shut')


## Collect & Sort
rows = list(get_rows()) + list(get_browser_history_rows()) + list(get_pmset_rows())
print()
rows = [list(row) for row in rows]  # Make mutable, for convenience
rows.sort()

## Add blanklines in 15-min pauses
def get_time(time_str): return datetime.datetime.strptime(time_str, '%Y-%m-%d__%H:%M:%S')
rows_with_blanks = [rows[0]]
for row1, row2 in boltons.iterutils.pairwise_iter(rows):
    time1, time2 = get_time(row1[0]), get_time(row2[0])
    delta_minutes = (time2 - time1).total_seconds() / 60
    if delta_minutes > 15:
        rows_with_blanks.append([])
    rows_with_blanks.append(row2)
rows = rows_with_blanks

## Re-format time
for row in rows:
    if row:
        dt = get_time(row[0])
        row[0] = dt.strftime('%b %d %I:%M%p').replace(' 0', '  ').replace('AM','am').replace('PM','pm')

## Dedup
rows = boltons.iterutils.unique(rows, key=tuple)

## Replace repeats with |||
rows_backup = copy.deepcopy(rows)
for idx, row in enumerate(rows):
    if idx > 0 and len(row) >= 3:
        prev_row = rows_backup[idx-1] + ['','','','']
        next_row = (rows[idx+1] if idx+1<len(rows) else []) + ['','','','']
        if row[1] == prev_row[1]:
            row[1] = ('│' if row[1] == next_row[1] else '╵')*len(row[1])
            if row[2] == prev_row[2]:
                row[2] = ('│' if row[2] == next_row[2] else '╵')*len(row[2])

## Print
for row in rows:
    if len(row)>=3: row[2] = f'{row[2]:<10}' # Make `pwd` 10+ chars wide
    print('   '.join(row)[:term_width-1])
