#!/usr/bin/env python3
# -*- mode: python -*-

# 22: Blake <-> Pontiac Trail <-> Dhu Varren <-> Nixon <-> Teubingen <-> Kroger <-> loop of North campus
# 23: Blake <-> Geddes <-> hospital <-> Plymouth <-> Kroger <-> (variable) <-> park&ride by 23.
# 65: Geddes(E)->Washtenaw(N)->Huron(W) loop <-> Broadway bridge <-> Plymouth <-> Kroger <-> southern Green
# NW: clockwise around Central Campus <-> West of Hosptial <-> Pierpont Commons <-> clockwise around North Campus
# CN: Geddes(E) -> above Palmer Field -> around Hospital -> Pierpoint Commons -> Huron&Hubbard/Hayward (South of Kroger)
# CS: Geddes(E) <- above Palmer Field <- around Hospital <- Pierpoint Commons <- Huron&Hubbard/Hayward (South of Kroger)
# BB: Huron(W)->West of Palmer Commons->Geddes(E)->Couzens/ZinaPitcher/MSII(N) loop <-> Pierpont <-> BB
# NES: ?

import requests
import sys
import json
import dateutil.parser
import datetime
import os.path

def getidx(lst, idx, default=None):
    if len(lst) > idx: return lst[idx]
    return default

url = 'http://www.theride.org/DesktopModules/AATA.EndPoint/Proxy.ashx?method=getpredictionsfromxml&stpid={stop}'

stops = {
    'clague': '628',
    'lanc': '1781',
    'lanc-N': '1788',
    'kroger': '1350',
    'kroger-N': '194',
    'pierpont': '1714',

    'childrens': '185',
    'obs': '184',
    'geddes': '1285',
    'blake': '145',
}



def get_buses(stop, route=None):
    try: j = requests.get(url.format(stop=stop)).json()
    except requests.exceptions.ConnectionError: print('No network'); exit(0)
    assert list(j) == ['stop'], j
    j = j['stop']
    if list(j) != ['pre']:
        assert j in [
            {'noPredictionMessage': 'No arrival times'},
            {'noPredictionMessage': 'No service scheduled'}
        ], j
        print("No arrivals\n"); return None
    j = j['pre']
    if not isinstance(j, list):
        j = [j] # the silly API skips the list if there's only one bus.
    for bus in j:
        record(bus, stop)
        if route and route != bus['rn']: continue
        try:
            print_bus(bus, route=route)
        except:
            print('failed for bus:')
            json.dump(bus, sys.stdout, indent=2)
            print('')
            print('---')
            raise


buslog = os.path.expanduser('~/.buslog')
def record(bus, stop):
    with open(buslog, 'a') as f:
        f.write(json.dumps([bus, stop]) + '\n')


def validate_bus(bus):
    req_keys = ('cars consist zone mode '
                'pu pt '
                'fd rn rd '
                'scheduled v').split()
    opt_keys = 'nextbusonroutetime nextbusminutes'.split()
    for key in req_keys: assert key in bus, key
    for key in bus: assert key in req_keys+opt_keys, key

    assert bus['cars'] is None
    assert bus['consist'] is None
    assert bus['zone'] is None
    assert bus['mode'] == '1'

    if bus['pu'] in [' MINUTES', ' MINUTE']:
        assert isinstance(bus['pt'], str) and 0 <= int(bus['pt']) < 100
    elif bus['pu'] in ['APPROACHING', 'DELAYED', 'DUE']:
        assert bus['pt'] == {"#cdata-section": "&nbsp;"} or bus['pt'] in range(0, 5+1)
    else: raise

    assert len(bus['fd']) > 5
    assert bus['rn'] == bus['rd']
    int(bus['rn'])

    assert bus['scheduled'] in ['true', 'false']
    scheduled = (bus['scheduled'] == 'true')
    assert scheduled == (bus['v'] == 'SCHEDULED')
    assert scheduled != (bus['v'].isdigit())
    assert scheduled != ('nextbusminutes' in bus)
    assert scheduled != ('nextbusonroutetime' in bus)
    if not scheduled:
        dateutil.parser.parse(bus['nextbusonroutetime'])
        int(bus['nextbusminutes'])


def print_bus(bus, route=None):
    validate_bus(bus)
    print('====>', bus['rn'].strip(), bus["fd"].strip())
    if bus['pu'] == ' MINUTES':
        arrival_time = datetime.datetime.now() + datetime.timedelta(minutes=int(bus['pt']))
        a = f'comes at {arrival_time.hour}:{arrival_time.minute:02} - in {bus["pt"]} minutes'
    elif bus['pu'] == 'APPROACHING':
        a = 'COMING NOW'
    else:
        a = 'DELAYED'
    if 'nextbusonroutetime' in bus:
        t = dateutil.parser.parse(bus['nextbusonroutetime'])
        try:
            minutes_late = int((arrival_time - t).total_seconds()) // 60
            if minutes_late == 0:
                a += ' - on time'
            elif minutes_late > 0:
                a += f' - scheduled time was {t.hour}:{t.minute:02} - running {minutes_late} minutes late'
            else:
                a += f' - scheduled time was {t.hour}:{t.minute:02} - running {-minutes_late} minutes early'
        except NameError:
            a += f' - scheduled time: {t.hour}:{t.minute:02}'
    print(a, end='\n\n\n')


def help():
    print('Available stops are:')
    for stop in stops: print(stop)
    print('\nOther commands:\n- test\n- test-offline')

if __name__ == '__main__':

    cmd = sys.argv[1] if len(sys.argv)>1 else ''

    if cmd in stops:
        get_buses(stops[cmd], getidx(sys.argv, 2))

    elif cmd in ['test', 'test-offline']:
        if cmd == 'test':
            for stopname, stop in stops.items():
                print(f'====={stopname}======')
                get_buses(stop)
        with open(buslog) as f:
            for line in f:
                try: validate_bus(json.loads(line)[0])
                except: raise Exception(json.loads(line)[0])

    else:
        help()
