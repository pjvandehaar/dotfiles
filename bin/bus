#!/usr/bin/env python3
# -*- mode: python -*-

import requests
import sys
import json
import dateutil.parser
import datetime
import os.path

url = 'http://www.theride.org/DesktopModules/AATA.EndPoint/Proxy.ashx?method=getpredictionsfromxml&stpid={stop}'

stops = {
    '22-lanc': ('1781', '22'), # 22: Blake <-> Pontiac Trail <-> Dhu Varren <-> Nixon <-> Teubingen <-> Kroger <-> loop of North campus
    '22-lanc-N': ('1788', '22'),
    '22-pierpont': ('1714', '22'),
    '22-blake': ('145', '22'),
    '22-kroger-N': ('194', '22'),

    '23-geddes': ('1285', '23'), # 23: Blake <-> Geddes <-> hospital <-> Plymouth <-> Kroger <-> (variable) <-> park&ride by 23.
    '23-childrens': ('185', '23'),
    '23-obs': ('184', '23'),
    '23-kroger': ('1350', '23'),
    '23-clague': ('628', '23'),

    '65-geddes': ('1285', '65'), # 65: Geddes(E)->Washtenaw(N)->Huron(W) loop <-> Broadway bridge <-> Plymouth <-> Kroger <-> southern Green
    '65-kroger': ('1350', '65'),
}


def get_buses(stop):
    j = requests.get(url.format(stop=stop[0])).json()
    assert list(j) == ['stop'], j
    j = j['stop']
    if list(j) != ['pre']:
        assert j in [
            {'noPredictionMessage': 'No arrival times'},
            {'noPredictionMessage': 'No service scheduled'}
        ], j
        print("No arrivals\n"); return None
    j = j['pre']
    if not isinstance(j, list):
        j = [j] # the silly API skips the list if there's only one bus.
    for bus in j:
        record(bus, stop)
        try:
            handle_bus(bus, stop)
        except:
            print('failed for bus:')
            json.dump(bus, sys.stdout, indent=2)
            print('')
            print('---')
            raise


buslog = os.path.expanduser('~/.buslog')
def record(bus, stop):
    with open(buslog, 'a') as f:
        f.write(json.dumps([bus, stop]) + '\n')


def handle_bus(bus, stop):
    req_keys = ('cars consist zone mode '
                'pu pt '
                'fd rn rd '
                'scheduled v').split()
    opt_keys = 'nextbusonroutetime nextbusminutes'.split()
    for key in req_keys: assert key in bus, key
    for key in bus: assert key in req_keys+opt_keys, key

    assert bus['cars'] is None
    assert bus['consist'] is None
    assert bus['zone'] is None
    assert bus['mode'] == '1'

    if bus['pu'] == ' MINUTES':
        assert isinstance(bus['pt'], str) and 0 <= int(bus['pt']) < 100
    elif bus['pu'] in ['APPROACHING', 'DELAYED']:
        assert bus['pt'] == {"#cdata-section": "&nbsp;"} or 0 <= bus['pt'] < 5
    else: raise

    assert len(bus['fd']) > 5
    assert bus['rn'] == bus['rd']
    int(bus['rn'])
    if bus['rn'] != stop[1]: return

    assert bus['scheduled'] in ['true', 'false']
    scheduled = (bus['scheduled'] == 'true')
    assert scheduled == (bus['v'] == 'SCHEDULED')
    assert scheduled != (bus['v'].isdigit())
    assert scheduled != ('nextbusminutes' in bus)
    assert scheduled != ('nextbusonroutetime' in bus)
    if not scheduled:
        dateutil.parser.parse(bus['nextbusonroutetime'])
        int(bus['nextbusminutes'])

    # output
    source = 'scheduled' if scheduled else 'prediction'
    if bus['pu'] == ' MINUTES':
        arrival_time = datetime.datetime.now() + datetime.timedelta(minutes=int(bus['pt']))
        print(f'bus {bus["rn"]} ({bus["fd"].strip()}) comes in {bus["pt"]} minutes'
              f'(at {arrival_time.hour}:{arrival_time.minute:02}) ({source})')

    else:
        status = 'COMING NOW' if bus['pu'] == 'APPROACHING' else 'DELAYED'
        print(f'bus {bus["rn"]} ({bus["fd"].strip()}) is {status}. ({source})')

    for key in 'nextbusonroutetime nextbusminutes'.split():
        if key in bus:
            print(f'{key}: {bus[key]}')
    if 'v' in bus and bus['v'] != 'SCHEDULED':
        print(f'v: {bus["v"]}')

    print('\n')


def help():
    print('Available stops are:')
    for stop in stops: print(stop)


if __name__ == '__main__':

    cmd = sys.argv[1] if len(sys.argv)>1 else ''

    if cmd in stops:
        get_buses(stops[cmd])

    elif cmd == 'test':
        for stopname, stop in stops.items():
            print(f'====={stopname}======')
            get_buses(stop)

    if cmd in ['test', 'test-offline']:
        with open(buslog) as f:
            for i, line in enumerate(f):
                print(f'====={i}=====')
                handle_bus(*json.loads(line))

    else:
        help()
