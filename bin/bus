#!/usr/bin/env python3
# -*- mode: python -*-

# 22: Blake <-> Pontiac Trail <-> Dhu Varren <-> Nixon <-> Teubingen <-> Kroger <-> loop of North campus
# 23: Blake <-> Geddes <-> hospital <-> Plymouth <-> Kroger <-> (variable) <-> park&ride by 23.
# 65: Geddes(E)->Washtenaw(N)->Huron(W) loop <-> Broadway bridge <-> Plymouth <-> Kroger <-> southern Green
# NW: clockwise around Central Campus <-> West of Hosptial <-> Pierpont Commons <-> clockwise around North Campus
# CN: Geddes(E) -> above Palmer Field -> around Hospital -> Pierpoint Commons -> Huron&Hubbard/Hayward (South of Kroger)
# CS: Geddes(E) <- above Palmer Field <- around Hospital <- Pierpoint Commons <- Huron&Hubbard/Hayward (South of Kroger)
# BB: Huron(W)->West of Palmer Commons->Geddes(E)->Couzens/ZinaPitcher/MSII(N) loop <-> Pierpont <-> BB
# NES: ?

import requests
import sys
import json
import datetime
from datetime import timedelta
import os.path, itertools, traceback
import tabview
import tqdm

url = 'http://www.theride.org/DesktopModules/AATA.EndPoint/Proxy.ashx?method=getpredictionsfromxml&stpid={stop}'

stops = {
    'clague': '628',
    'lanc': '1781',
    'lanc-N': '1788',
    'kroger': '1350',
    'kroger-N': '194',
    'pierpont': '1714',

    'childrens': '185',
    'obs': '184',
    'geddes': '1285',
    'blake': '145',
}


def fetch_and_print_buses(stop):
    buses = fetch_buses(stop)
    for bus in buses:
        try:
            print_bus(bus)
        except:
            print('Error:')
            print(traceback.format_exc())
            print('failed for bus:'); json.dump(bus, sys.stdout, indent=2); print('\n---')
            debug_buses(buses)
            raise

def fetch_buses(stop):
    try: j = requests.get(url.format(stop=stop)).json()
    except requests.exceptions.ConnectionError: print('No network'); exit(1)
    if list(j.keys()) != ['bustime-response']:
        raise Exception('ERROR: response had unexpected format:\n',
                        json.dumps(j, indent=2))
    j = j['bustime-response']
    if list(j) != ['prd']:
        assert j in [
            {'noPredictionMessage': 'No arrival times'},
            {'noPredictionMessage': 'No service scheduled'},
            {'error': {'stpid': stop, 'msg': 'No arrival times'}},
        ], j
        print("No arrivals\n")
        return []
    buses = j['prd']
    if isinstance(buses, dict): buses = [buses]
    buses = [order_bus_keys(bus) for bus in buses]
    for bus in buses: record(bus, stop)
    return buses

def debug_buses(buses):
    print('all buses (by key):')
    keys = sorted(set(itertools.chain.from_iterable(b.keys() for b in buses)))
    keys.sort(key=lambda k:KEYS.index(k) if k in KEYS else -1)
    for key in keys:
        print(f'- {key:10}:', ', '.join((repr(b[key] if key in b else '-') for b in buses)))
    print('')
    input('press enter to show tabview >')
    matrix = ([keys] +
              [[b[k] for k in keys]
               for b in buses])
    col_widths = [max(len(str(matrix[row][col])) for row in range(len(matrix))) for col in range(len(matrix[0]))]
    col_widths = [min(20, w) for w in col_widths]
    tabview.tabview.view(matrix, column_widths=col_widths)
def order_bus_keys(bus):
    return {k:bus[k] for k in sorted(bus.keys(), key=lambda k:KEYS.index(k) if k in KEYS else -1)}

buslog = os.path.expanduser('~/.buslog')
def record(bus, stop):
    with open(buslog, 'a') as f:
        f.write(json.dumps([bus, stop]) + '\n')


KEYS = ('des rtdir '
        'dstp geoid rid rt rtdd seq stpid stpnm tablockid tatripid tripid vid zone typ '
        'tmstmp schdtm prdtm prdctdn dly ').split()
def validate_bus(bus, check_real_time=True):
    assert sorted(bus.keys()) == sorted(KEYS)

    assert isinstance(bus['des'], str) and 3 <= len(bus['des']) <= 40
    assert isinstance(bus['rtdir'], str) and 3 <= len(bus['rtdir']) <= 40

    assert 0 <= int(bus['dstp']) < 1e9
    assert 0 <= int(bus['geoid']) < 1e9
    assert 0 <= int(bus['rid']) < 1e9
    assert 0 <= int(bus['rt']) < 1e9
    assert bus['rt'] == bus['rtdd']
    assert 0 <= int(bus['seq']) < 1e9
    assert bus['stpid'] in stops.values()
    assert 0 <= int(bus['stpid']) < 1e9
    assert 0 <= int(bus['tablockid']) < 1e9
    assert 0 <= int(bus['tatripid']) < 1e9
    assert 0 <= int(bus['tripid']) < 1e9
    assert bus['vid'] is None or 0 <= int(bus['vid']) < 1e9
    assert bus['zone'] is None
    assert bus['typ'] in ['A', 'D'] # no idea what these mean

    now_t =    datetime.datetime.strptime(bus['tmstmp'], '%Y%m%d %H:%M')
    arrive_t = datetime.datetime.strptime(bus['prdtm'], '%Y%m%d %H:%M')
    sched_t =  datetime.datetime.strptime(bus['schdtm'], '%Y%m%d %H:%M')
    if check_real_time:
        real_now_t = datetime.datetime.now()
        assert abs(now_t - real_now_t) < timedelta(minutes=5), real_now_t
    minutes_away = (arrive_t - now_t).total_seconds() / 60
    minutes_late = (arrive_t - sched_t).total_seconds() / 60
    assert 0 <= minutes_away < 120
    assert -60 < minutes_late < 60

    if bus['prdctdn'] not in ['DUE','DLY']: assert abs(minutes_away - int(bus['prdctdn'])) < 5

    assert bus['dly'] in ['true', 'false'] # doesn't follow any logic



def print_bus(bus):
    validate_bus(bus)

    real_now_t = datetime.datetime.now()
    arrive_t =   datetime.datetime.strptime(bus['prdtm'], '%Y%m%d %H:%M')
    sched_t =    datetime.datetime.strptime(bus['schdtm'], '%Y%m%d %H:%M')
    minutes_from_now = (arrive_t - real_now_t).total_seconds() / 60
    minutes_late = (arrive_t - sched_t).total_seconds() / 60

    x = f'==> {bus["rt"]:>2} {bus["des"]:40} - {arrive_t.strftime("%H:%M")} (in {minutes_from_now:2.0f} minutes)'
    if minutes_late >= 2:
        x += f' - scheduled for {sched_t.strftime("%H:%M")} ({minutes_late:.0f} minutes late)'
    elif minutes_late <= -2:
        x += f' - scheduled for {sched_t.strftime("%H:%M")} ({-minutes_late:.0f} minutes early)'
    if bus['prdctdn'] == 'DUE': x += ' - due'
    elif bus['prdctdn'] == 'DLY': x += ' - delayed'
    print(x)


def help():
    print('Available stops are:')
    for stop in stops: print(stop)
    print('\nOther commands:\n- test\n- test-offline')

if __name__ == '__main__':

    cmd = sys.argv[1] if len(sys.argv)>1 else ''

    if cmd in stops:
        fetch_and_print_buses(stops[cmd])

    elif cmd == 'debug':
        debug_buses(fetch_buses(stops[sys.argv[2]]))

    elif cmd in ['test', 'test-offline']:
        if cmd == 'test':
            for stopname, stop in stops.items():
                print(f'====={stopname}======')
                fetch_and_print_buses(stop)
        with open(buslog) as f:
            for line in tqdm.tqdm(list(f)):
                bus = json.loads(line)[0]
                try: validate_bus(bus, check_real_time=False)
                except:
                    print('Error for bus:'); json.dump(bus, sys.stdout, indent=2); print('\n')
                    raise

    else:
        help()
