#!/usr/bin/env python3
# -*- mode: python -*-

# COMPARISONS:
#  - ActivityMonitor.app: does hierarchy and sorting but not clade_usage
#  - htop/atop: does hierarchy, but not sorting or clade_usage
#  - iotop/iostat/dstat


# TODO: show per-process diskio (only possible on linux for my own processes, I think)
# TODO: show per-process swap/paging
# TODO: show per-process state?

# TODO: show some overall stats, like:
#        RAM/cache/swap/paging,
#        `df`, disk reads/second, disk read latency,
#        kbps_in, kbps_out, %tcp_retransmission


import psutil, signal, time, sys, itertools, getpass, shutil, re, functools, subprocess
from psutil import AccessDenied


signal.signal(signal.SIGPIPE, signal.SIG_DFL)

TERM_WIDTH = shutil.get_terminal_size().columns

def use_ipdb():
    def excepthook(*args, **kwargs):
        from IPython.core import ultratb
        sys.excepthook = ultratb.FormattedTB(mode='Verbose', color_scheme='Linux', call_pdb=1)
        return sys.excepthook(*args, **kwargs)
    sys.excepthook = excepthook

@functools.lru_cache()
def username_by_uid():
    # This handles cases where `psutil.Process(pid).username()` returns `uid` (integer) instead of the username (str)
    lines = subprocess.check_output(['/usr/bin/getent','passwd']).decode('ascii').split('\n')
    username_by_uid = {}
    for line in filter(None, lines):
        parts = line.split(':')
        username_by_uid[parts[2]] = parts[0]
    return username_by_uid

def decode_username(username):
    assert isinstance(username, str)
    if not username.isdigit():
        return username
    try:
        return username_by_uid()[username]
    except KeyError:
        return '?' + username



# Note: `proc` is a psutil.Process()
#       `p` is a dictionary representing a process
def get_pid_tree(user_filter=None):
    ppidmap = psutil._ppid_map() # {pid -> ppid}
    p_with_pid = {}
    for pid in set(itertools.chain(ppidmap.keys(), ppidmap.values())):
        p_with_pid[pid] = {'pid':pid, 'children':[]}
    for pid,ppid in ppidmap.items():
        if pid != ppid: # on macOS, 0 is parent of 0
            p_with_pid[ppid]['children'].append(p_with_pid[pid])
    if user_filter:
        stack = [dict(p=p_with_pid[0], good=[], unchecked=p_with_pid[0]['children'].copy())]
        good_pids = {0}
        while stack:
            s = stack[-1]
            if s['unchecked']:
                child = s['unchecked'].pop()
                stack.append(dict(p=child, good=[], unchecked=child['children']))
            else:
                if len(stack)>1:
                    is_good = bool(s['good'])
                    if not is_good:
                        try:
                            s['p']['proc'] = psutil.Process(s['p']['pid'])
                            is_good = decode_username(s['p']['proc'].username()) == user_filter
                        except psutil.NoSuchProcess: pass
                    if is_good:
                        stack[-2]['good'].append(s['p'])
                        good_pids.add(s['p']['pid'])
                s['p']['children'] = s['good']
                stack = stack[:-1]
        p_with_pid = {pid:p for pid,p in p_with_pid.items() if pid in good_pids}

    for pid, p in p_with_pid.items():
        try:
            proc = p['proc'] if 'proc' in p else psutil.Process(pid)
            with proc.oneshot():
                p['proc'] = proc
                p['user'] = decode_username(proc.username())
                p['name'] = proc.name()
                # TODO: learn to predict when each of these will fail by logging [exe?, cmdline?, ..., user=='root', user==$USER]
                try:p['exe'] = proc.exe()
                except (AccessDenied, FileNotFoundError):pass
                try:p['cmdline'] = proc.cmdline()
                except AccessDenied:pass
                try:
                    p['cpu_s1'] = (lambda x:x.system + x.user)(proc.cpu_times())
                    p['cpu_s1_t'] = time.time()
                    p['mem_rss'] = proc.memory_info().rss
                except AccessDenied: pass
                try:
                    p['num_fds'] = proc.num_fds()
                    p['num_con'] = len(proc.connections())
                except AccessDenied: pass
        except psutil.NoSuchProcess: pass # process can die at any time, raising this error when we call its methods

    time.sleep(1)

    for p in p_with_pid.values():
        if 'cpu_s1' in p:
            try: x = p['proc'].cpu_times() ; cpu_s2 = x.system + x.user
            except psutil.NoSuchProcess: continue
            assert cpu_s2 >= p['cpu_s1']
            p['cpu'] = (cpu_s2 - p['cpu_s1']) / (time.time() - p['cpu_s1_t'])
    accum_proc_info(p_with_pid[0])
    for p in p_with_pid.values(): p.pop('proc', None) # if a process has died, `repr(proc)` raises an Exception? or, ipdb introspection does?
    return p_with_pid[0]

def accum_proc_info(p):
    for child in p['children']: accum_proc_info(child)
    p['family'] = {}
    for k in 'cpu mem_rss num_fds num_con'.split():
        p['family'][k] = (p.get(k,0) + sum(child['family'].get(k,0) for child in p['children']))
        # TODO: if any of these is missing k, we should write "{x}+"


def repr_fd(x):
    if 'num_fds' not in x: return ' '*4+'?'
    ret = f"{x['num_fds']:5.0f}"
    if ret.strip() == '0': return ' '*4+'.'
    return ret
def repr_con(x):
    if 'num_con' not in x: return ' '*4+'?'
    ret = f"{x['num_con']:5.0f}"
    if ret.strip() == '0': return ' '*4+'.'
    return ret
def repr_cpu(x):
    if 'cpu' not in x: return ' '*4+'? '
    ret = f'{x["cpu"]*100:6.1f}'
    if ret.strip() == '0.0': return ' '*4+'. '
    if ret.strip()[:-1] == '0.': return ' '*4+'.'+ret[-1]
    return ret
def repr_mem(x):
    if 'mem_rss' not in x: return ' '*6+'?'
    ret = f'{x["mem_rss"]/2**20:7.0f}'
    if ret.strip() == '0': return ' '*6+'.'
    return ret
def repr_name(x):
    if x.get('cmdline',''):
        if x['cmdline']==['SCREEN']: return 'screen'
        if x['cmdline']==['/usr/local/bin/bash','-l']: return 'bash'
        if x['cmdline'][0].endswith('iTerm2'): return 'iTerm2'
        if len(x['cmdline'][0]) > 30: return x['cmdline'][0].split('/')[-1] + ' '  + ' '.join(x['cmdline'][1:])
        return ' '.join(x['cmdline'])
    if x.get('exe',''): return x['exe'].split('/')[-1]
    if x.get('name','')=='sshd': return 'sshd' # to reduce clutter
    if x.get('name',''): return x['name']
    return '?'

def repr_p(p, tree_prefix_first='', tree_prefix_rest='', p_sort_key=(lambda p: p['pid'])):
    f = p['family']
    line = (f"{p['pid']:6} {p.get('user','?')[:9]:9}" +
            repr_fd(f) + repr_con(f) + '  ' + repr_cpu(f) + repr_mem(f) +
            ' ' + tree_prefix_first + repr_name(p))
    ret = line[:TERM_WIDTH] + '\n'
    if p['children'] and (p.get('mem_rss',0) > 30e6 or p.get('cpu',0) >= 0.01):
        line = (
            f"{p['pid']:6} {p.get('user','?')[:9]:9}" +
            repr_fd(p) + repr_con(p) + '  ' + repr_cpu(p) + repr_mem(p) +
            ' ' + tree_prefix_rest + '├──•')
        ret = line[:TERM_WIDTH] + '\n' + ret

    p['children'].sort(key=p_sort_key)
    for i, child in enumerate(p['children']):
        if i+1 < len(p['children']):
            ret = repr_p(child,
                         tree_prefix_first = tree_prefix_rest + '├─╴',
                         tree_prefix_rest  = tree_prefix_rest + '│  ',
                         p_sort_key = p_sort_key) + ret
        else:
            ret = repr_p(child,
                         tree_prefix_first = tree_prefix_rest + '┌─╴',
                         tree_prefix_rest  = tree_prefix_rest + '   ',
                         p_sort_key = p_sort_key) + ret
    return ret


def inspect_pid(pid):
    p = psutil.Process(pid)

    try:
        for m in p.memory_maps(): print(m.path)
    except psutil.AccessDenied:
        print('[cannot access memmaps]')
    print()

    try:
        for f in p.open_files(): print(f.path)
    except psutil.AccessDenied:
        print('[cannot access open files]')
    print()

    try:
        for k,v in p.environ().items(): print(f'- {k:30} = {v}')
    except psutil.AccessDenied:
        print('[cannot access environ]')
    print()

    def repr_addr(a):
        if a == (): return ' '*15+'-'+' '*6
        try:return f'{"["+a.ip+"]":>15}:{a.port:<6}' if ':' in a.ip else f'{a.ip:>15}:{a.port:<6}'
        except: return repr(a)
    try:
        for c in p.connections():
            try:print(f'{c.status:12}  {repr_addr(c.laddr)}  {repr_addr(c.raddr)}  {repr(c.type)}  {repr(c.family)}')
            except: print(c)
    except psutil.AccessDenied:
        print('[cannot access connections]')
    print()

    try:
        print(p.io_counters())
    except psutil.AccessDenied:
        print('[cannot access bytes read/written]')
    print()

    print(p); print()
    print(p.cmdline()); print()
    print(f'#threads: {p.num_threads()}'); print()
    print(f'ctx switches: {p.num_ctx_switches()}'); print()



if __name__ == '__main__':
    use_ipdb()

    if sys.argv[1:] and sys.argv[1].isdigit():
        inspect_pid(int(sys.argv[1]))

    elif sys.argv[1:] and sys.argv[1] == '--users':
        users = {}
        xs = []
        for proc in psutil.process_iter(attrs='username cpu_times memory_info num_fds connections'.split()):
            i = proc.info
            username = decode_username(i['username'])
            u = users.setdefault(username,{
                'cpu':0, 'mem_rss':0, 'num_fds':0, 'num_con':0,
            })
            u['mem_rss'] += i['memory_info'].rss if i['memory_info'] else 0
            u['num_fds'] += i['num_fds'] or 0
            u['num_con'] += len(i['connections'] or [])
            if i['cpu_times'] is not None:
                xs.append({
                    'username': username,
                    'proc': proc,
                    'cpu_s1': i['cpu_times'].system + i['cpu_times'].user,
                    'cpu_s1_t': time.time(),
                })
        time.sleep(1)
        for x in xs:
            try:c = x['proc'].cpu_times()
            except psutil.NoSuchProcess: pass
            users[x['username']]['cpu'] += (c.system+c.user - x['cpu_s1']) / (time.time()-x['cpu_s1_t'])
        system_avail = {'cpu': psutil.cpu_count(), 'mem_rss': psutil.virtual_memory().total}
        total_used = {'cpu': sum(d['cpu'] for d in users.values()), 'mem_rss': sum(d['mem_rss'] for d in users.values())}
        print('[available] ' + f'{repr_cpu(system_avail)}  {repr_mem(system_avail)}')
        print('[%used]     ' + f' ({total_used["cpu"]/system_avail["cpu"]*100:.0f}%)    ({total_used["mem_rss"]/system_avail["mem_rss"]*100:.0f}%)')
        print(' '*12+'  %CPU       MB   #FD  #CON')
        for u, d in sorted(users.items(), key=lambda a: a[1]['mem_rss'], reverse=True):
            if repr_cpu(d).strip()=='.' and repr_mem(d).strip()=='.' and d['num_fds']==0 and d['num_con']==0: continue # skip idlers
            print(f"{u[:12]:12}{repr_cpu(d)}  {repr_mem(d)}{d['num_fds'] or '.':>6}{d['num_con'] or '.':>6}")

    else:
        if '--fd' in sys.argv[1:]:    p_sort_key = lambda p: (-p['family']['num_fds'], -p['family']['num_con'], p['pid'])
        elif '--con' in sys.argv[1:]: p_sort_key = lambda p: (-p['family']['num_con'], -p['family']['num_fds'], p['pid'])
        elif '--cpu' in sys.argv[1:]: p_sort_key = lambda p: (round(-p['family']['cpu']*100, 1), round(-p['family']['mem_rss']/2**20, 0), p['pid'])
        elif '--mem' in sys.argv[1:]: p_sort_key = lambda p: (round(-p['family']['mem_rss']/2**20, 0), round(-p['family']['cpu']*100, 1), p['pid'])
        else:                         p_sort_key = None
        user_filter = ([arg for arg in sys.argv[1:] if not arg.startswith('--')] or [None])[0]

        root = get_pid_tree(user_filter)
        system_avail = {'cpu': psutil.cpu_count(), 'mem_rss': psutil.virtual_memory().total}
        if p_sort_key is None:
            cpu_usage = root['family']['cpu'] / system_avail['cpu']
            mem_usage = root['family']['mem_rss'] / system_avail['mem_rss']
            if cpu_usage > mem_usage and cpu_usage > 0.3:  p_sort_key = lambda p: (round(-p['family']['cpu']*100, 1), round(-p['family']['mem_rss']/2**20, 0), p['pid'])
            else:                                          p_sort_key = lambda p: (round(-p['family']['mem_rss']/2**20, 0), round(-p['family']['cpu']*100, 1), p['pid'])
        print(repr_p(root, p_sort_key=p_sort_key).rstrip('\n'))
        print('   PID USER       #FD #CON    %CPU     MB')
        print(f'                            {repr_cpu(system_avail)}{repr_mem(system_avail)}')
