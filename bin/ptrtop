#!/usr/bin/env python3
# -*- mode: python -*-

# This script is like `top`, but:
# 1. It shows large files that are opened by a process, and it shows what position in that file is being read or written (on linux).
# 2. It organizes processes in their tree of parents and children.
#    Processes are sorted according to CPU or RAM (whichever is used more on your computer).
#    A process's descendants all count towards its CPU and RAM usage.
#    Eg, firefox has lots of child processes, and all of their CPU and RAM is counted towards the parent Firefox.
#    If a parent process has substantial individual CPU or RAM, it also shows a fake child "â€¢" of only its own usage.
# You can inspect a single process with `ptrtop $pid` (including open files) or compare users' total usage with `ptrtop --users`.

# Requirements: `pip3 install psutil`

# Comparisons:
#  - ActivityMonitor.app: does hierarchy and sorting but not clade_usage
#  - htop/atop: does hierarchy, but not sorting or clade_usage
#  - iotop/iostat/dstat
#  - glances

# TODO: make rows and clades easier to scan.  use a slight grey background on each third line.
#       or de-emphasize lines that are not an immediate child of pid1.
#       or rainbow by depth
# TODO: use fg/bg/bold to visualize CPU/mem usage (like `glances`). 800MB should stand out but doesn't.
# TODO: highlight $(basename $0) like `glances`.

# TODO: show systemd unit file (gotten by `ps -o unit= $PID`)

# TODO: show per-process diskio (only possible on linux for my own processes, I think)
# TODO: show per-process swap/paging
# TODO: show per-process state (R/S/D)

# TODO: show some overall stats, like:
#        RAM/cache/swap/paging,
#        `df`, disk reads/second, disk read latency,
#        kbps_in, kbps_out, %tcp_retransmission

if __name__ == '__main__':
    try: import kpa.dev_utils
    except ImportError: pass
    else: kpa.dev_utils.run(__file__, run_rarely=True, make_cache=False)


from typing import Dict, Optional, Callable, Tuple, Any, List, Set, Union
import psutil, signal, time, sys, itertools, shutil, functools, subprocess, re, os, getpass
from pathlib import Path
from psutil import AccessDenied
ProcDict = Dict[str,Any]
PID = int

signal.signal(signal.SIGPIPE, signal.SIG_DFL)

TERM_WIDTH = shutil.get_terminal_size().columns
MACHINE_CPU_COUNT = psutil.cpu_count()
MACHINE_RAM = psutil.virtual_memory().total

def use_ipdb():
    def excepthook(*args, **kwargs):
        from IPython.core import ultratb
        sys.excepthook = ultratb.FormattedTB(mode='Verbose', color_scheme='Linux', call_pdb=1)
        return sys.excepthook(*args, **kwargs)
    sys.excepthook = excepthook

@functools.lru_cache(None)
def shorten_filepath(filepath: str) -> str:
    try:
        parent, filename = os.path.split(filepath)
        return shorten_filedir(parent) + '/' + filename
    except PermissionError: return filepath
@functools.lru_cache(None)
def shorten_filedir(filedir: str) -> str:
    if filedir == '/': return ''
    parent, filename = os.path.split(filedir)
    shortened_parent = shorten_filedir(parent)
    sibling_filenames = [name for name in get_filenames_in_filedir(parent) if name != filename]
    for length in range(3,len(filename)-2):
        prefix = filename[:length]
        if not any(name.startswith(prefix) for name in sibling_filenames):
            return f'{shortened_parent}/{prefix}*'
    return f'{shortened_parent}/{filename}'
@functools.lru_cache(None)
def get_filenames_in_filedir(filedir: str) -> List[str]:
    return os.listdir(filedir)

def get_lsof_file_info(pid:int) -> Dict[int,Tuple[str,int,int]]:
    '''pid -> (mode, position, size)'''
    try:
        out = subprocess.check_output(f'lsof -o -o 20 -P -F -p {pid}'.split())
    except subprocess.CalledProcessError:
        return {}
    ret: Dict[int,Tuple[str,int,int]] = {}
    fd, mode, size, offset = -1, '', -1, -1
    for line in out.split(b'\n'):
        # These lines should always appear in this order: f a s o
        if line[:1] == b'f' and line[1:].isdigit():
            fd = int(line[1:])
        elif line[:1] == b'a':
            mode = line[1:].decode('ascii')
        elif line[:1] == b's':
            size = int(line[1:])
        elif line[:1] == b'o':
            if line[1:3] == b'0t': offset = int(line[3:])
            elif line[1:3] == b'0x': offset = int(line[3:], 16)
            else: offset = int(line[1:])
            ret[fd] = (mode, offset, size)
    return ret

def get_file_info(pid:int, proc:psutil.Process, run_lsof:bool = False, only_size_when_offset:bool = True) -> List[Tuple[str,str,int,int,str]]:
    '''[(path, mode, size, position, percent), ...]'''
    def clean_mode(mode:str) -> str:
        if mode == 'w': return ' w'
        if mode in ['u', 'r+']: return 'rw'
        return mode
    def get_percent(size:int, position:int) -> str:
        if size == -1 or position == -1: return ''
        if size == position: return 'end'
        return f'{position / size * 99:2.0f}%'
    try: open_files = sorted(proc.open_files(), key=lambda f:f.path)
    except (psutil.NoSuchProcess, psutil.AccessDenied): return []
    ret = []
    if run_lsof:
        info_by_fd = get_lsof_file_info(pid)
        for f in open_files:
            info = info_by_fd.get(f.fd)
            if info:
                mode, size, position = info[0], info[2], info[1]
                ret.append((f.path, clean_mode(mode), size, position, get_percent(size, position)))
            else:
                ret.append((f.path, '', -1, -1, ''))
    else:
        for f in open_files:
            position = getattr(f, 'position', -1)  # macOS lacks f.position and f.mode
            size = Path(f.path).stat().st_size if position > 3e6 else -1
            ret.append((f.path, clean_mode(getattr(f, 'mode', '')), size, position, get_percent(size, position)))
    return ret



@functools.lru_cache()
def username_by_uid() -> Dict[str,str]:
    # This handles cases where `psutil.Process(pid).username()` returns `uid` (integer) instead of the username (str)
    lines = subprocess.check_output(['/usr/bin/getent','passwd']).decode('ascii').split('\n')
    username_by_uid = {}
    for line in filter(None, lines):
        parts = line.split(':')
        username_by_uid[parts[2]] = parts[0]
    return username_by_uid

def decode_username(username:str) -> str:
    assert isinstance(username, str)
    if not username.isdigit():
        return username
    try:
        return username_by_uid()[username]
    except KeyError:
        return '?' + username


# Note: `proc` is a psutil.Process()
#       `p` is a dictionary representing a process
def get_pid_tree(user_filter:Optional[Set[str]] = None, show_big_files:bool = False, drop_boring:bool = True) -> ProcDict:
    p_for_pid: Dict[PID,ProcDict] = {}  # {pid: {...}}

    ppidmap: Dict[PID,PID] = psutil._ppid_map() # {pid -> ppid}
    for pid in set(itertools.chain(ppidmap.keys(), ppidmap.values())):
        p_for_pid[pid] = {'pid':pid, 'children':[]}
    for pid,ppid in ppidmap.items():
        if pid != ppid: # on macOS, 0 is parent of 0
            p_for_pid[ppid]['children'].append(p_for_pid[pid])

    if user_filter:
        # If a process doesn't belong to any user in `user_filter` and none of its descendants do either,
        #  then prune it from the process tree and from p_for_pid.
        for pid,p in p_for_pid.items():
            try:
                p['proc'] = psutil.Process(pid)
                p['user'] = decode_username(p['proc'].username())
            except psutil.NoSuchProcess: pass

        def delete_if_bad(pid:PID) -> None:
            p = p_for_pid[pid]
            for child in p['children']: delete_if_bad(child['pid'])
            p['children'] = [child for child in p['children'] if child['pid'] in p_for_pid]
            if user_filter and p.get('user') not in user_filter and len(p['children']) == 0:
                del p_for_pid[pid]
        delete_if_bad(0)
        if not p_for_pid: raise Exception("No processes left after filter")

    for pid, p in p_for_pid.items():
        try:
            proc: psutil.Process = p['proc'] if 'proc' in p else psutil.Process(pid)
            with proc.oneshot():
                p['proc'] = proc
                p['user'] = decode_username(proc.username())
                p['name'] = proc.name()
                # TODO: learn to predict when each of these will fail by logging [exe?, cmdline?, ..., user=='root', user==$USER]
                try:p['exe'] = proc.exe()
                except (AccessDenied, FileNotFoundError):pass
                try:p['cmdline'] = proc.cmdline()
                except AccessDenied:pass
                try:
                    p['cpu_s1'] = (lambda x:x.system + x.user)(proc.cpu_times())
                    p['cpu_s1_t'] = time.time()
                    p['mem_rss'] = proc.memory_info().rss
                except AccessDenied: pass
                try:
                    p['num_fds'] = proc.num_fds()
                    p['num_con'] = len(proc.connections())
                except AccessDenied: pass
        except psutil.NoSuchProcess: pass # process can die at any time, raising this error when we call its methods

    def add_big_files(p:ProcDict) -> None:
        for child in p['children']: add_big_files(child)
        # TODO: can I find a heuristic for when to spend the time to run lsof?
        if 'proc' not in p: return
        file_info = get_file_info(p['pid'], p['proc'], run_lsof=show_big_files)
        for (path, mode, size, position, percent) in file_info:
            if size >= 100e3 and position >= 3e6:
                path = shorten_filepath(path)
                p.setdefault('bigfiles', []).append(f'{path}  {size//1_000_000:5,}M ({percent}) {mode:2}')
        if len(p.get('bigfiles',[])) > 50:
            p['bigfiles'] = p['bigfiles'][:5] + ['[{} total...]'.format(len(p['bigfiles']))] + p['bigfiles'][-5:]
    add_big_files(p_for_pid[0])

    time.sleep(1)

    for p in p_for_pid.values():
        if 'cpu_s1' in p:
            try: x = p['proc'].cpu_times() ; cpu_s2 = x.system + x.user
            except psutil.NoSuchProcess: continue
            assert cpu_s2 >= p['cpu_s1']
            p['cpu'] = (cpu_s2 - p['cpu_s1']) / (time.time() - p['cpu_s1_t'])
    accum_proc_info(p_for_pid[0])

    if drop_boring:
        p_for_pid[0]['children'] = [child for child in p_for_pid[0]['children'] if child['family']['cpu']>0.01 or child['family']['mem_rss']>30e6]
        p_for_pid[1]['children'] = [child for child in p_for_pid[1]['children'] if child['family']['cpu']>0.01 or child['family']['mem_rss']>30e6]

    for p in p_for_pid.values(): p.pop('proc', None) # if a process has died, `repr(proc)` raises an Exception? or, ipdb introspection does?
    return p_for_pid[0]

def accum_proc_info(p:ProcDict) -> None:
    for child in p['children']: accum_proc_info(child)
    p['family'] = {}
    for k in 'cpu mem_rss num_fds num_con'.split():
        p['family'][k] = (p.get(k,0) + sum(child['family'].get(k,0) for child in p['children']))
        # TODO: if any of these is missing k, we should write "{x}+"


def repr_fd(x:ProcDict) -> str:
    if 'num_fds' not in x: return ' '*4+'?'
    ret = f"{x['num_fds']:5.0f}"
    if ret.strip() == '0': return ' '*4+'.'
    return ret
def repr_con(x:ProcDict) -> str:
    if 'num_con' not in x: return ' '*4+'?'
    ret = f"{x['num_con']:5.0f}"
    if ret.strip() == '0': return ' '*4+'.'
    return ret
def repr_cpu(x:ProcDict) -> str:
    if 'cpu' not in x: return ' '*4+'? '
    ret = f'{x["cpu"]*100:6.1f}' # okay for 99 cpus
    if ret.strip() == '0.0': return ' '*4+'. '
    if ret.strip()[:-1] == '0.': return ' '*4+'.'+ret[-1]
    return ret
def repr_mem(x:ProcDict) -> str:
    if 'mem_rss' not in x: return ' '*6+'?'
    ret = f'{x["mem_rss"]/2**20:7.0f}' # okay for 9999GB
    if ret.strip() == '0': return ' '*6+'.'
    return ret
def repr_name(x:ProcDict) -> str:
    if x.get('cmdline',''):
        if x['cmdline']==['SCREEN']: return 'screen'
        if x['cmdline']==['/usr/local/bin/bash','-l']: return 'bash'
        if x['cmdline'][0].endswith('iTerm2'): return 'iTerm2'
        argv = [x['cmdline'][0] if len(x['cmdline'][0]) < 30 else x['cmdline'][0].split('/')[-1]] + x['cmdline'][1:]
        argv = [repr(arg) if re.search(r'\s', arg) else arg for arg in argv]  # repr args that contain whitespace
        return ' '.join(argv)
    if x.get('exe',''): return x['exe'].split('/')[-1]
    if x.get('name','')=='sshd': return 'sshd' # to reduce clutter
    if x.get('name',''): return x['name']
    return '?'

def repr_p(p:ProcDict, tree_prefix_first:str = '', tree_prefix_rest:str = '', p_sort_key:Callable = (lambda p: p['pid'])) -> str:
    '''Print out a process for the process tree'''
    lines = []
    f = p['family']
    lines.append(f"{p['pid']:6} {p.get('user','?')[:9]:9}" +
                 repr_fd(f) + repr_con(f) + '  ' + repr_cpu(f) + repr_mem(f) +
                 ' ' + tree_prefix_first + repr_name(p))
    # Sometimes the process deserves its own line:
    if p['children'] and (p.get('mem_rss',0) > MACHINE_RAM/100 or p.get('cpu',0) >= MACHINE_CPU_COUNT/100):
        lines.insert(0,
                     f"{p['pid']:6} {p.get('user','?')[:9]:9}" +
                     repr_fd(p) + repr_con(p) + '  ' + repr_cpu(p) + repr_mem(p) +
                     ' ' + tree_prefix_rest + 'â”œâ”€â”€â€¢')

    for i, bigfile in enumerate(p.get('bigfiles', [])):
        if i==0 and len(lines[0]) + 1 + len(bigfile) < TERM_WIDTH:
            lines[0] = lines[0] + bigfile.rjust(TERM_WIDTH - len(lines[0]))
        else:
            prefix = ''.join('â”‚' if char in 'â”‚â”œ' else ' ' for char in lines[0]).rstrip()
            lines.insert(0, prefix + bigfile.rjust(TERM_WIDTH - len(prefix)))

    ret = '\n' + '\n'.join(line[:TERM_WIDTH] for line in lines)

    p['children'].sort(key=p_sort_key)
    for i, child in enumerate(p['children']):
        if i+1 < len(p['children']):
            ret = repr_p(child,
                         tree_prefix_first = tree_prefix_rest + 'â”œâ”€â•´',
                         tree_prefix_rest  = tree_prefix_rest + 'â”‚  ',
                         p_sort_key = p_sort_key) + ret
        else:
            ret = repr_p(child,
                         tree_prefix_first = tree_prefix_rest + 'â”Œâ”€â•´',
                         tree_prefix_rest  = tree_prefix_rest + '   ',
                         p_sort_key = p_sort_key) + ret
    return ret


def inspect_pid(pid:PID) -> None:
    '''Print out info about one process'''
    try:
        p = psutil.Process(pid)
    except psutil.NoSuchProcess:
        print(f'[No process with pid {pid}]')
        exit(1)

    try:
        for i, (k,v) in enumerate(sorted(p.environ().items())):
            if i == 0: print('[environ]')
            print(f'- {k:30} = {v}')
    except psutil.AccessDenied:
        print('[cannot access environ]')
    print()

    try:
        for i, mmap_path in enumerate(sorted(mmap.path for mmap in p.memory_maps())):
            if i == 0: print('[memory maps]')
            print(' ', mmap_path)
    except (psutil.AccessDenied, AttributeError):
        print('[cannot access memory maps]')
    print()

    try:
        file_info = get_file_info(pid, p, run_lsof=True, only_size_when_offset=False)
        for i, (path, mode, size, position, percent) in enumerate(file_info):
            if i == 0: print('[files]    SIZE  POS MODE PATH')
            print(f'{size:15,}  {percent:3} {mode:2}  {path}')
    except psutil.AccessDenied:
        print('[cannot access open files]')
    print()

    def repr_addr(a) -> str:
        if a == (): return ' '*15+'-'+' '*6
        try:return f'{"["+a.ip+"]":>15}:{a.port:<6}' if ':' in a.ip else f'{a.ip:>15}:{a.port:<6}'
        except Exception: return repr(a)
    try:
        conns = p.connections()
        for i, c in enumerate(conns):
            if i == 0: print('[connections]')
            try:print(' ', f'{c.status:12}  {repr_addr(c.laddr)}  {repr_addr(c.raddr)}  {repr(c.type)}  {repr(c.family)}')
            except Exception: print(c)
            if i+1 == len(conns): print()
    except psutil.AccessDenied:
        print('[cannot access connections]\n')

    try:
        pio = p.io_counters()
        print('[io]')
        try:
            for label, num in sorted(pio._asdict().items()):
                print(f'  {label}: {num:,}')
        except Exception:
            print(' ', str(pio))
    except (psutil.AccessDenied, AttributeError):
        print('[cannot access bytes read/written]')
    print()

    print(f'#threads: {p.num_threads()}'); print()
    print(f'ctx switches: {p.num_ctx_switches()}'); print()
    print(p); print()
    print(p.cmdline()); print()


def summarize_users() -> None:
    users: Dict[str, Dict[str, float]] = {}
    xs:List[ProcDict] = []
    for proc in psutil.process_iter(attrs='username cpu_times memory_info num_fds connections'.split()):
        i = proc.info
        username = decode_username(i['username'])
        u = users.setdefault(username, {'cpu':0, 'mem_rss':0, 'num_fds':0, 'num_con':0})
        u['mem_rss'] += i['memory_info'].rss if i['memory_info'] else 0
        u['num_fds'] += i['num_fds'] or 0
        u['num_con'] += len(i['connections'] or [])
        if i['cpu_times'] is not None:
            xs.append({
                'username': username,
                'proc': proc,
                'cpu_s1': i['cpu_times'].system + i['cpu_times'].user,
                'cpu_s1_t': time.time(),
            })
    time.sleep(1)
    for x in xs:
        try: c = x['proc'].cpu_times()
        except psutil.NoSuchProcess: pass
        users[x['username']]['cpu'] += (c.system+c.user - x['cpu_s1']) / (time.time()-x['cpu_s1_t'])
    system_avail = {'cpu': MACHINE_CPU_COUNT, 'mem_rss': MACHINE_RAM}
    total_used = {'cpu': sum(d['cpu'] for d in users.values()), 'mem_rss': sum(d['mem_rss'] for d in users.values())}
    def user_is_idle(d:dict)->bool: return repr_cpu(d).strip()=='.' and repr_mem(d).strip()=='.' and d['num_fds']==0 and d['num_con']==0
    username_len = max(max(len(u) for u,d in users.items() if not user_is_idle(d)), len('[available] '))
    def repr_username(u:str)->str: return f'{u[:username_len]:{username_len}}'
    print(f'{repr_username("[available]")}{repr_cpu(system_avail)} {repr_mem(system_avail)}')
    print(f'{repr_username("[used]")}{repr_cpu(total_used)} {repr_mem(total_used)}')
    print(f'{repr_username(" ")}  %CPU      MB   #FD  #CON')
    for username, d in sorted(users.items(), key=lambda a: a[1]['mem_rss'], reverse=True):
        d = users[username]
        if user_is_idle(d): continue
        print(f"{repr_username(username)}{repr_cpu(d)} {repr_mem(d)}{d['num_fds'] or '.':>6}{d['num_con'] or '.':>6}")


if __name__ == '__main__':
    use_ipdb()

    if set(sys.argv[1:]).intersection(['-h', '--help']):
        print(" ptrtop            Show tree of processes")
        print(" ptrtop USER...    Show tree of USER's processes and their ancestors (me=$USER)")
        print("                   These exclude children of pid 0 and pid 1 that have clade_usage < 1%cpu and 30MB (unless you pass --all)")
        print("                   You can sort by --fd --con --cpu --mem (default: most constrained resource)\n")
        print(" ptrtop PID        Show info about a process\n")
        print(" ptrtop --users    Show total resources used by each user\n")
        print("Some information requires `sudo` for others' processes.")

    # Print info about one PID
    elif sys.argv[1:] and all(arg.isdigit() for arg in sys.argv[1:]):
        for arg in sys.argv[1:]:
            inspect_pid(int(arg)); print()

    # Summarize resource use by each user
    elif sys.argv[1:] == ['--users']:
        summarize_users()

    # Show the whole process tree, optionally filtered to some users
    else:
        p_sort_key: Optional[Callable[[Any], Tuple[Any, Any, Any]]] = None
        if '--fd' in sys.argv[1:]:    p_sort_key = lambda p: (-p['family']['num_fds'], -p['family']['num_con'], p['pid'])
        elif '--con' in sys.argv[1:]: p_sort_key = lambda p: (-p['family']['num_con'], -p['family']['num_fds'], p['pid'])
        elif '--cpu' in sys.argv[1:]: p_sort_key = lambda p: (round(-p['family']['cpu']*100, 1), round(-p['family']['mem_rss']/2**20, 0), p['pid'])
        elif '--mem' in sys.argv[1:]: p_sort_key = lambda p: (round(-p['family']['mem_rss']/2**20, 0), round(-p['family']['cpu']*100, 1), p['pid'])
        drop_boring = '--all' not in sys.argv[1:]
        user_filter = set(arg for arg in sys.argv[1:] if not arg.startswith('-'))
        if 'me' in user_filter: user_filter.add(getpass.getuser())
        show_big_files = '--big' in sys.argv[1:]

        root = get_pid_tree(user_filter, show_big_files=show_big_files, drop_boring=drop_boring)
        system_avail = {'cpu': psutil.cpu_count(), 'mem_rss': psutil.virtual_memory().total}
        if p_sort_key is None:
            cpu_usage = root['family']['cpu'] / system_avail['cpu']
            mem_usage = root['family']['mem_rss'] / system_avail['mem_rss']
            if cpu_usage > mem_usage and cpu_usage > 0.3:  p_sort_key = lambda p: (round(-p['family']['cpu']*100, 1), round(-p['family']['mem_rss']/2**20, 0), p['pid'])
            else:                                          p_sort_key = lambda p: (round(-p['family']['mem_rss']/2**20, 0), round(-p['family']['cpu']*100, 1), p['pid'])

        print(repr_p(root, p_sort_key=p_sort_key).rstrip('\n'))
        print('   PID USER       #FD #CON    %CPU     MB')
        print(f'                            {repr_cpu(system_avail)}{repr_mem(system_avail)}')
