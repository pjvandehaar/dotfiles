# This file customizes tmux to:
#  + open a new tab using `ctrl-down`,
#  + switch tabs using `ctrl-left` or `ctrl-right`,
#  + re-position tabs using `ctrl-shift-left` or `ctrl-shift-right`,
#  + split into two panes using `ctrl-q |` or `ctrl-q -`.
#  + resize panes with `ctrl-q ctrl-left` (and repeating left) (actually a default)
#  + join multiple tabs into panes of one tab using `ctrl-q j` and re-break them with `ctrl-q J`.
#  + rename a tab with `F8`, and
#  + handle clicking and scrolling reasonably (though selecting text on the host OS might require holding ctrl).

# Note: If various things (especially mouse-related) break, check that you have mosh>=1.2.6 .

# Note: reload settings with `C-q I`

set -g prefix C-q
unbind-key -n C-a  # conflicts with bash readline and emacs


# Window Management
# =================
bind-key -n M-Left previous-window
bind-key -n M-Right next-window
bind-key -n M-Down new-window -c '#{pane_current_path}' # Doesn't work on old versions of tmux.

bind-key -n C-S-Left swap-window -t :-1 \; select-window -t :-1
bind-key -n C-S-Right swap-window -t :+1 \; select-window -t :+1
# bind-key -n C-S-Left swap-window -d -t :-1
# bind-key -n C-S-Right swap-window -d -t :+1

bind-key -n F8 command-prompt -p "(rename-window)" "rename-window '%%'" # Allow spaces


# Pane Management
# ===============
# To switch panes: `C-q o` or `C-q <arrowkey>` or click.
# To resize panes: `C-q C-<arrowkey>` or click-and-drag.
bind-key '|' split-window -h -c "#{pane_current_path}"
bind-key '-' split-window -v -c "#{pane_current_path}"
bind-key '_' split-window -v -c "#{pane_current_path}"
bind-key m command-prompt -p ' man' "split-window -h -c '#{pane_current_path}' 'man %%'"
bind-key j join-pane -s :+1 # bring next "window" (tab) into a pane in this window.
bind-key J break-pane


# Display
# =======
# Taken from /usr/share/byobu/profiles/tmux
set -g status-style bg='#333333',fg='#EEEEEE' # bottom status bar colors
set -g message-style bg='#75507B',fg=white # prompt color when doing `C-q $`, etc
set-window-option -g window-status-current-style bg=yellow,fg=black,underscore # current tab
set-window-option -g window-status-style bg='#333333',fg='#EEEEEE' # tab without changes to show (same as status bar colors)
set-window-option -g window-status-activity-style bg='#666666',fg='#FFFFFF' # tab with changes to show (slightly lighter than inactive)
set-window-option -g monitor-activity on # update tab name to running process name, even in background. Also highlight tabs with changes.
set -g status-interval 2 # check for updates for window title every 2 seconds

# set-option -g set-titles on
# set-option -g set-titles-string '#(whoami)@#H  (#S)'
set-option -g history-limit 100000 # Does this work?

set -g default-terminal "screen-256color" # <http://unix.stackexchange.com/questions/1045/getting-256-colors-to-work-in-tmux>

set -g status-right ' #{?client_prefix,#[reverse]<Prefix>#[noreverse] ,}#{=21:pane_title}'

set -g bell-action none  # no sound


# Mouse
# =====
set-option -g mouse on
unbind -n MouseDrag1Pane # disable mouse-dragging
unbind -Tcopy-mode MouseDrag1Pane # disable mouse-dragging

# Expected scrolling:
# Based on <http://sc0ty.pl/2015/12/reasonable-mouse-support-in-tmux/>
# pane_in_mode is whether I'm already in copy mode
# mouse_any_flag is whether I'm in a scroll-handling program like emacs
# alternate_on is whether I'm in a full-screen program like [emacs, vim, less, mosh]
#    - but `less -X` doesn't use alternate mode.
# Note: htop triggers mouse_any_flag but can only handle mouse input when compiled with ncurses6 (eg, through homebrew)
# Note: when I pipe (eg, into less), #{pane_current_command} is bash.
# Note: this is very similar to what tmux-better-mouse-mode sets.
# Note: this doesn't work on `browser` with `[[ ... ]]`, but it works fine with `[ ... ]`.
#    - are there some non-printable characters in there?  What's going on?
bind-key -n WheelUpPane \
    if-shell -t= "[ #{pane_in_mode} = 1 ] || [ #{mouse_any_flag} = 1 ]" \
        "send-keys -M" \
        "if-shell -t= '[ #{alternate_on} = 1 ]' \
            'send-keys Up Up Up' \
            'copy-mode -e'"
# We send scrolls (instead of arrows) to non-alternate-mode commands like cat.
bind-key -n WheelDownPane \
    if-shell -t= "[ #{pane_in_mode} = 1 ] || [ #{mouse_any_flag} = 1 ] || [ #{alternate_on} = 0 ]" \
        "send-keys -M" \
        "send-keys Down Down Down"

# # Debugging mouse control:
# set -g status-right 'cmd:#{pane_current_command} ms_any_f:#{mouse_any_flag} ms_btn_f:#{mouse_button_flag} ms_std_f:#{mouse_standard_flag} mode:#{pane_in_mode} alt:#{alternate_on}'
# set -g status-interval 1
# set -g status-right-length 150
